package document;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/** 
 * A naive implementation of the Document abstract class. 
 * @author UC San Diego Intermediate Programming MOOC team
 */
 
public class BasicDocument extends Document 
{
	private final String WordsCountExpression="[a-zA-Z]+";
	private final String sentencesCountExpression= "[^?!.]+";
	/** Create a new BasicDocument object
	 * 
	 * @param text The full text of the Document.
	 */
	public BasicDocument(String text)
	{
		super(text);
	}
	
	
	/**
	 * Get the number of words in the document.
	 * "Words" are defined as contiguous strings of alphabetic characters
	 * i.e. any upper or lower case characters a-z or A-Z
	 * 
	 * @return The number of words in the document.
	 */
	@Override
	public int getNumWords()
	{
		List<String> textWords = getTokens(WordsCountExpression);
	 
	    if(textWords==null)
	    	return 0;
        return textWords.size();
	}
	
	/**
	 * Get the number of sentences in the document.
	 * Sentences are defined as contiguous strings of characters ending in an 
	 * end of sentence punctuation (. ! or ?) or the last contiguous set of 
	 * characters in the document, even if they don't end with a punctuation mark.
	 * 
	 * @return The number of sentences in the document.
	 */
	@Override
	public int getNumSentences()
	{
		List<String> tokens = getTokens(sentencesCountExpression);
	    if(tokens==null)
	    	return 0;
        return tokens.size();
	}
	
	/**
	 * Get the number of syllables in the document.
	 * Words are defined as above.  Syllables are defined as:
	 * a contiguous sequence of vowels, except for a lone "e" at the 
	 * end of a word if the word has another set of contiguous vowels, 
	 * makes up one syllable.   y is considered a vowel.
	 * @return The number of syllables in the document.
	 */
	@Override
	public int getNumSyllables()
	{
		int count = 0;
		List<String> textWords= getTokens(WordsCountExpression );
		List <String> execludedWords= new ArrayList<String>();
		for(String word:textWords)
		{
		    
		    if (word.charAt(word.length()-1)=='e' || word.charAt(word.length()-1)=='E') {
		    	textWords.remove(word.toLowerCase());
		    	execludedWords.add(word.toLowerCase());
		    }
		}
		count+=getNumSyllablesInNormalWords(textWords);       
	    return count;
	}
	
	
	/* The main method for testing this class. 
	 * You are encouraged to add your own tests.  */
	public static void main(String[] args)
	{
		testCase(new BasicDocument("This is a test.  How many???  "
		        + "Senteeeeeeeeeences are here... there should be 5!  Right?"),
				16, 13, 5);
		System.out.println("********************");
		testCase(new BasicDocument(""), 0, 0, 0);
		System.out.println("********************");
		testCase(new BasicDocument("sentence, with, lots, of, commas.!  "
		        + "(And some poaren)).  The output is: 7.5."), 15, 11, 4);
		System.out.println("********************");
		testCase(new BasicDocument("many???  Senteeeeeeeeeences are"), 6, 3, 2);
		System.out.println("********************");
		testCase(new BasicDocument("Here is a series of test sentences. Your program should "
				+ "find 3 sentences, 33 words, and 49 syllables. Not every word will have "
				+ "the correct amount of syllables (example, for example), "
				+ "but most of them will."), 49, 33, 3);
		System.out.println("********************");
		testCase(new BasicDocument("Segue"), 2, 1, 1);
		System.out.println("********************");
		testCase(new BasicDocument("Sentence"), 2, 1, 1);
		System.out.println("********************");
		testCase(new BasicDocument("Sentences?!"), 3, 1, 1);
		System.out.println("********************");
		testCase(new BasicDocument("Lorem ipsum dolor sit amet, qui ex choro quodsi moderatius, nam dolores explicari forensibus ad."),
		         32, 15, 1);
		
		System.out.println("********************");
		
	}
	private int getNumSyllablesInSingleNormalWord(List<String> words) {
 
	    for(String word: words)
	    {
		getNumSyllablesInSingleNormalWords(word);
	    }
	    return count;
	}


	private void getNumSyllablesInSingleNormalWords(String word) {
		int count = 0;	
		Pattern splitter = Pattern.compile("[^aeiouy]*[aeiouy]+");
	    Matcher m = splitter.matcher(word);
	    while (m.find())
	    	{
	        count++;
	    	}
	}
	private int getumSyllablesWordsWithE(List<String> words) {
		int count=0;
		   for(String word: words)
		    {
			   if (silente(word)){
		            String newword = word.substring(0, word.length()-1);
		            count = count + countit(newword);
		        } else {
		            count++;
		    }
	}

	private boolean silente(String word) {
	    word = word.substring(0, word.length()-1);
	    Pattern pattern = Pattern.compile("[aeiouy]");
	    Matcher m = pattern.matcher(word);
	    return m.find();
	}
}
